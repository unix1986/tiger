// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proj/pb_files/test.proto

#ifndef PROTOBUF_proj_2fpb_5ffiles_2ftest_2eproto__INCLUDED
#define PROTOBUF_proj_2fpb_5ffiles_2ftest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_proj_2fpb_5ffiles_2ftest_2eproto();
void protobuf_AssignDesc_proj_2fpb_5ffiles_2ftest_2eproto();
void protobuf_ShutdownFile_proj_2fpb_5ffiles_2ftest_2eproto();

class Test;

// ===================================================================

class Test : public ::google::protobuf::Message {
 public:
  Test();
  virtual ~Test();

  Test(const Test& from);

  inline Test& operator=(const Test& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Test& default_instance();

  void Swap(Test* other);

  // implements Message ----------------------------------------------

  inline Test* New() const { return New(NULL); }

  Test* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Test& from);
  void MergeFrom(const Test& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Test* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 i = 1 [default = 1];
  bool has_i() const;
  void clear_i();
  static const int kIFieldNumber = 1;
  ::google::protobuf::uint32 i() const;
  void set_i(::google::protobuf::uint32 value);

  // optional string s = 2 [default = "tiger"];
  bool has_s() const;
  void clear_s();
  static const int kSFieldNumber = 2;
  const ::std::string& s() const;
  void set_s(const ::std::string& value);
  void set_s(const char* value);
  void set_s(const char* value, size_t size);
  ::std::string* mutable_s();
  ::std::string* release_s();
  void set_allocated_s(::std::string* s);

  // @@protoc_insertion_point(class_scope:Test)
 private:
  inline void set_has_i();
  inline void clear_has_i();
  inline void set_has_s();
  inline void clear_has_s();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  static ::std::string* _default_s_;
  ::google::protobuf::internal::ArenaStringPtr s_;
  ::google::protobuf::uint32 i_;
  friend void  protobuf_AddDesc_proj_2fpb_5ffiles_2ftest_2eproto();
  friend void protobuf_AssignDesc_proj_2fpb_5ffiles_2ftest_2eproto();
  friend void protobuf_ShutdownFile_proj_2fpb_5ffiles_2ftest_2eproto();

  void InitAsDefaultInstance();
  static Test* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Test

// optional uint32 i = 1 [default = 1];
inline bool Test::has_i() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Test::set_has_i() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Test::clear_has_i() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Test::clear_i() {
  i_ = 1u;
  clear_has_i();
}
inline ::google::protobuf::uint32 Test::i() const {
  // @@protoc_insertion_point(field_get:Test.i)
  return i_;
}
inline void Test::set_i(::google::protobuf::uint32 value) {
  set_has_i();
  i_ = value;
  // @@protoc_insertion_point(field_set:Test.i)
}

// optional string s = 2 [default = "tiger"];
inline bool Test::has_s() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Test::set_has_s() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Test::clear_has_s() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Test::clear_s() {
  s_.ClearToDefaultNoArena(_default_s_);
  clear_has_s();
}
inline const ::std::string& Test::s() const {
  // @@protoc_insertion_point(field_get:Test.s)
  return s_.GetNoArena(_default_s_);
}
inline void Test::set_s(const ::std::string& value) {
  set_has_s();
  s_.SetNoArena(_default_s_, value);
  // @@protoc_insertion_point(field_set:Test.s)
}
inline void Test::set_s(const char* value) {
  set_has_s();
  s_.SetNoArena(_default_s_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Test.s)
}
inline void Test::set_s(const char* value, size_t size) {
  set_has_s();
  s_.SetNoArena(_default_s_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Test.s)
}
inline ::std::string* Test::mutable_s() {
  set_has_s();
  // @@protoc_insertion_point(field_mutable:Test.s)
  return s_.MutableNoArena(_default_s_);
}
inline ::std::string* Test::release_s() {
  clear_has_s();
  return s_.ReleaseNoArena(_default_s_);
}
inline void Test::set_allocated_s(::std::string* s) {
  if (s != NULL) {
    set_has_s();
  } else {
    clear_has_s();
  }
  s_.SetAllocatedNoArena(_default_s_, s);
  // @@protoc_insertion_point(field_set_allocated:Test.s)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proj_2fpb_5ffiles_2ftest_2eproto__INCLUDED
